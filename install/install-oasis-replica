#!/bin/bash
# Install and configure all application software on oasis-replica
# Written by Dave Dykstra 2-4-2015

MYSHORTNAME="`uname -n|cut -d. -f1`"
case "$MYSHORTNAME" in
    oasis-replica|oasis-replica-itb);;
    *)  echo "Only run this on oasis-replica or oasis-replica-itb"
	exit 2
	;;
esac

set -ex

SCRIPTDIR="`dirname $0`"
if [ "$SCRIPTDIR" = "." ]; then
    SCRIPTDIR="`pwd`"
fi
cd

ARCH=`arch`
AUFSRPM=aufs-0.20090202.cvs-6.sl5.src.rpm
CVMFSRELRPM=cvmfs-release-2-4.el5.noarch.rpm
CVMFSVER=2.1.20
CVMFSRPM=cvmfs-$CVMFSVER-1.el5.$ARCH.rpm
CVMFSSERVERRPM=cvmfs-server-$CVMFSVER-1.el5.$ARCH.rpm
CVMFSCONFIGRPM=cvmfs-config-default-1.1-1.noarch.rpm
FRONTIERRELRPM=frontier-release-1.1-1.noarch.rpm
SQUIDRPM=frontier-squid-2.7.STABLE9-22.1.$ARCH.rpm
AWSTATSRPM=frontier-awstats-6.9-3.1.noarch.rpm
OASISRPM=oasis-2.0.35-1.osg32.el5.noarch.rpm

PATH="$PATH:/sbin"

# import OSG key because we'll be directly downloading oasis rpm
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-OSG

# download, build, and install aufs
wget -q -N "http://ftp.scientificlinux.org/linux/scientific/5x/SRPMS/SL/$AUFSRPM"
mkdir -p /usr/src/redhat/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
rpm -i $AUFSRPM
rm $AUFSRPM
# note: the kernel-devel install may not be needed; it's not removed in
#  uninstall but try to install it because it's not guaranteed to be there
yum install -y rpm-build kernel-devel-`uname -r` gcc
rpmbuild -ba --target $ARCH --define "kernel `uname -r`" /usr/src/redhat/SPECS/aufs.spec
rpm -iv /usr/src/redhat/RPMS/$ARCH/*aufs*.rpm

# install aufs postupdate script so it will get rebuilt when kernel is rebuilt
mkdir -p /opt/etc/osupdate.d
cp $SCRIPTDIR/aufs.postupdate /opt/etc/osupdate.d
# and run it now in case an osupdate happened before this install
/opt/etc/osupdate.d/aufs.postupdate

# create srv directory if it isn't there yet
NETSRVDIR="/net/vm08/oasis-share/srv/$MYSHORTNAME"
if [ ! -d $NETSRVDIR ]; then
    mkdir $NETSRVDIR
    setfacl -b $NETSRVDIR
    chmod 755 $NETSRVDIR
fi

# mount srv directory permanently at /srv
if ! grep -q "[ \t]/srv[ \t]" /etc/fstab; then
    echo "`echo $NETSRVDIR|sed 's,/net/\([^/]*\),\1:,'` /srv	nfs 	defaults 	0 0" >>/etc/fstab
fi
mkdir -p /srv

# need netfs to mount NFS at boot
chkconfig netfs on
# The chkconfig on by itself isn't enough, because /etc/resolv.conf listens
#  only on 127.0.0.1 and the server doesn't start until late.  This works
#  around it by starting the local dns caching server earlier.
ln -s /etc/rc3.d/S99dnsmasq /etc/rc3.d/S24dnsmasq
service netfs start


# create symlinks for important log directories out to the big disk
for LOGD in cvmfs httpd squid; do
    mkdir -p /srv/log/$LOGD
    rm -rf /var/log/$LOGD
    ln -s /srv/log/$LOGD /var/log
done

# squid log dir has to be owned by squid user id
chown squid:squid /srv/log/squid

# install cvmfs
wget -q -N https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/$CVMFSRELRPM
rpm -i $CVMFSRELRPM
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CernVM
rpm -e cvmfs-release
rm $CVMFSRELRPM
CVRPMS="$CVMFSRPM $CVMFSSERVERRPM $CVMFSCONFIGRPM"
wget -q -N https://ecsft.cern.ch/dist/cvmfs/cvmfs-$CVMFSVER/$CVMFSRPM
wget -q -N https://ecsft.cern.ch/dist/cvmfs/cvmfs-$CVMFSVER/$CVMFSSERVERRPM
wget -q -N https://ecsft.cern.ch/dist/cvmfs/cvmfs-config/$CVMFSCONFIGRPM
yum -y install $CVRPMS
rm $CVRPMS
cp /etc/cvmfs/keys/egi.eu/egi.eu.pub /etc/cvmfs/keys
cp /etc/cvmfs/keys/opensciencegrid.org/opensciencegrid.org.pub /etc/cvmfs/keys
yum -y install mod_wsgi

echo -e "*\t\t-\tnofile\t\t16384" >>/etc/security/limits.conf
ulimit -n 16384
cat >/etc/logrotate.d/cvmfs <<xEOFx
# Created by install script.  Will be recreated next reinstall.
/var/log/cvmfs/*.log {
    weekly
    missingok
    notifempty
}
xEOFx
cat >/etc/httpd/conf.d/cvmfs.conf <<"xEOFx"
# Created by install script.  Will be recreated next reinstall.
# 8080 is used for other stratum 1s and 8081 is used for squid
Listen 8080
Listen 8081
KeepAlive On
MaxClients 64
ListenBackLog 1024
RewriteEngine On
RewriteRule ^/cvmfs/([^./]*)/(.*)$ /cvmfs/$1.opensciencegrid.org/$2
RewriteRule ^/cvmfs/([^/]+)/api/(.*)$ /cvmfs/$1/api/$2 [PT]
RewriteRule ^/cvmfs/(.*)$ /srv/cvmfs/$1
<Directory "/srv/cvmfs"> 
    Options -MultiViews FollowSymLinks -Indexes
    AllowOverride All 
    Order allow,deny 
    Allow from all

    EnableMMAP Off 
    EnableSendFile Off

    AddType application/x-cvmfs .cvmfspublished .cvmfswhitelist

    Header unset Last-Modified
    FileETag None

    ExpiresActive On
    ExpiresDefault "access plus 3 days" 
    ExpiresByType text/html "access plus 15 minutes" 
    ExpiresByType application/x-cvmfs "access plus 2 minutes"
</Directory>

WSGIDaemonProcess cvmfs-api processes=2 display-name=%{GROUP} \
    python-path=/usr/share/cvmfs-server/webapi
WSGIProcessGroup cvmfs-api
WSGISocketPrefix /var/run/wsgi
WSGIScriptAliasMatch /cvmfs/([^/]+)/api /var/www/wsgi-scripts/cvmfs-api.wsgi/$1
xEOFx
chkconfig httpd on
service httpd start

cat >>/etc/sysctl.conf <<xEOFx
# Controls maximum listen() backlog for apache.  Added by install script.
net.core.somaxconn = 1024
xEOFx
sysctl -w net.core.somaxconn=1024

# add robots.txt
cat >/var/www/html/robots.txt <<xEOFx
User-agent: *
Disallow: /
xEOFx

# install frontier-squid & frontier-awstats
wget -q -N http://frontier.cern.ch/dist/rpms/RPMS/noarch/$FRONTIERRELRPM
rpm -i $FRONTIERRELRPM
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-cern-frontier
rpm -e frontier-release
wget -q -N http://frontier.cern.ch/dist/rpms/RPMS/$ARCH/$SQUIDRPM
wget -q -N http://frontier.cern.ch/dist/rpms/RPMS/noarch/$AWSTATSRPM
yum -y install $SQUIDRPM $AWSTATSRPM
rm $FRONTIERRELRPM $SQUIDRPM $AWSTATSRPM
cat >/etc/squid/customize.sh <<"xEOFx"
#!/bin/bash
# Created by install script.  Will be recreated next reinstall.

awk --file `dirname $0`/customhelps.awk --source '{

# cache only api calls
insertline("^http_access deny all", "acl CVMFSAPI urlpath_regex ^/cvmfs/[^/]*/api/")
insertline("^http_access deny all", "cache deny !CVMFSAPI")

# port 80 is also supported, through an iptables redirect
setoption("http_port", "8000 accel defaultsite=localhost:8081")
insertline("^http_port", "cache_peer localhost parent 8081 0 no-query originserver")

# allow incoming http accesses from anywhere
# all requests will be forwarded to the originserver
commentout("http_access allow NET_LOCAL")
insertline("^http_access deny all", "http_access allow all")

# do not let squid cache DNS entries more than 5 minutes
setoption("positive_dns_ttl", "5 minutes")

# set shutdown_lifetime to 0 to avoid giving new connections error 
# codes, which get cached upstream
setoption("shutdown_lifetime", "0 seconds")

# turn off collapsed_forwarding to prevent slow clients from slowing down faster ones
setoption("collapsed_forwarding", "off")

print
}'
xEOFx
chmod +x /etc/squid/customize.sh
# maximum space used by logs is roughly 3 times this setting
echo "export SQUID_MAX_ACCESS_LOG=1G" >/etc/sysconfig/frontier-squid
cat >/etc/iptables.d/60-local-cvmfs <<"xEOFx"
# Created by install script.  Will be recreated next reinstall.
. /etc/iptables.d/setup

# redirect port 80 to port 8000
$ITNAPRE4 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8000
$ITNAO4 -o lo -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8000

# open tcp port 80 and port 8000 for squid
$ITFAI -p tcp --dport 80 -j ACCEPT
$ITFAI -p tcp --dport 8000 -j ACCEPT
$ITFAI4 -p tcp --dport 80 -j ACCEPT
$ITFAI4 -p tcp --dport 8000 -j ACCEPT

# open tcp port 8080 for httpd
$ITFAI -p tcp --dport 8080 -j ACCEPT
$ITFAI4 -p tcp --dport 8080 -j ACCEPT

# open udp port 3401
$ITFAI -p udp --dport 3401 -j ACCEPT
$ITFAI4 -p udp --dport 3401 -j ACCEPT

#
xEOFx
chmod +x /etc/iptables.d/60-local-cvmfs
service gociptables restart
chkconfig frontier-squid on
service frontier-squid start

# install frontier-awstats password if available
APWFILE=/srv/etc/awstats/password-file
if [ ! -f $APWFILE ]; then
    case $MYSHORTNAME in
	*-itb)
	    # make a copy from production
	    SRCAPWFILE="`echo $NETSRVDIR|sed 's/-itb//'`/etc/awstats/password-file"
	    if [ -f $SRCAPWFILE ]; then
		mkdir -p `dirname $APWFILE`
		cp $SRCAPWFILE $APWFILE
	    fi
	    ;;
    esac
fi
if [ -f $APWFILE ]; then
    cp $APWFILE /etc/awstats
    chown squid:squid /etc/awstats/password-file
fi

# install oasis
OASISVER="`echo $OASISRPM|cut -d- -f2`"
OASISSUBVER="`echo $OASISRPM|cut -d- -f3|cut -d. -f1-3`"
wget -q -N http://koji-hub.batlab.org/mnt/koji/packages/oasis/$OASISVER/$OASISSUBVER/noarch/$OASISRPM
yum -y install $OASISRPM
rm $OASISRPM
chkconfig oasis-replica-initclean on

# need nfslock for the repos to be on NFS
chkconfig nfslock on
service nfslock start

# on itb install also the oasis-itb pub key and read from oasis-itb
OASISPUBKEYS=/etc/cvmfs/keys/opensciencegrid.org.pub
case $MYSHORTNAME in
    *-itb)
	cp "`echo $NETSRVDIR|sed 's/-replica-itb//'`"/etc/cvmfs/oasis-itb.opensciencegrid.org.pub /etc/cvmfs/keys
	OASISPUBKEYS="$OASISPUBKEYS:/etc/cvmfs/keys/oasis-itb.opensciencegrid.org.pub"
	REPOURLS="http://oasis-itb.opensciencegrid.org:8000/cvmfs/oasis.opensciencegrid.org"
	;;
    *)
	REPOURLS="http://oasis.opensciencegrid.org:8000/cvmfs/oasis.opensciencegrid.org"
	;;
esac
REPOURLS="$REPOURLS http://cvmfs-stratum0.gridpp.rl.ac.uk:8000/cvmfs/config-egi.egi.eu"
# usatlast3 is unreliable, let it be added later by generate_replicas
REPOURLS="$REPOURLS `print_osg_repos -u|grep -v usatlast3`"
for URL in $REPOURLS; do
    REPO="`basename $URL`"
    if [ -d /srv/cvmfs/$REPO ]; then
	mv /srv/cvmfs/$REPO /srv/cvmfs/.$REPO.ins
    fi
    if [ "$REPO" = "oasis.opensciencegrid.org" ]; then
	cvmfs_server add-replica -o root $URL $OASISPUBKEYS
	rm /etc/httpd/conf.d/cvmfs.$REPO.conf
    else
	add_osg_repository -a "$URL"
    fi
    if [ -d /srv/cvmfs/.$REPO.ins ]; then
	rm -rf /srv/cvmfs/$REPO
	mv /srv/cvmfs/.$REPO.ins /srv/cvmfs/$REPO
    fi
done

# do initial snapshots for those repos that need it
for URL in $REPOURLS; do
    REPO="`basename $URL`"
    if [ ! -f /srv/cvmfs/$REPO/.cvmfspublished ]; then
	cvmfs_server snapshot $REPO
    fi
done

# add cron entries
mkdir -p /var/log/cvmfs
cat >>/etc/cron.d/cvmfs <<'xEOFx'
# Created by install script.  Will be recreated next reinstall.
0,15,30,45 * * * * root test -d /srv/cvmfs||exit;TMPFILE=/tmp/cvmfscron.$$.log;LOGFILE=/var/log/cvmfs/updates.log;echo "Cron log in $TMPFILE starting at `date`" >>$LOGFILE;(for r in `cd /srv/cvmfs;echo *.*`; do echo; if [ -f /srv/cvmfs/$r/.cvmfspublished ]; then echo "Starting $r at `date`";if ! cvmfs_server snapshot -t $r;then echo "ERROR from cvmfs_server!"; fi;echo "Finished $r at `date`";fi;done) >$TMPFILE 2>&1;cat $TMPFILE >>$LOGFILE;rm -f $TMPFILE
5,20,35,50 * * * * root     PATH=$PATH:/usr/sbin /usr/share/oasis/generate_replicas >>/var/log/cvmfs/generate_replicas.log 2>&1
*/3 * * * * root   /usr/share/oasis/oasis_replica_status >/dev/null 2>&1
0 9 * * * root     find /srv/cvmfs/*.*/data/txn -name "*.*" -mtime +2 2>/dev/null|xargs rm -f
xEOFx

set +x
echo 
echo "Installation of $MYSHORTNAME completed successfully at `date`"
